<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="D_ContentDir" xml:space="preserve">
    <value>Content</value>
    <comment>The directory which will be used to save all the content files to.</comment>
  </data>
  <data name="D_FailedDir" xml:space="preserve">
    <value>Failed</value>
    <comment>The directory which will contain all the shapes that could not be refined by this program.</comment>
  </data>
  <data name="D_FeatureDir" xml:space="preserve">
    <value>Vectors</value>
    <comment>The directory which will contain the different extracted feature vectors.</comment>
  </data>
  <data name="D_FeatureFile" xml:space="preserve">
    <value>featurevectors.csv</value>
    <comment>The file where all the features/descriptors will be saved in.</comment>
  </data>
  <data name="D_FinalDir" xml:space="preserve">
    <value>Final</value>
    <comment>The directory which will contain all the shapes that have fully been refined by the program.</comment>
  </data>
  <data name="D_InitialDir" xml:space="preserve">
    <value>Initial</value>
    <comment>The directory which will contain the initial shapes that need to be processed.</comment>
  </data>
  <data name="D_MeasureDir" xml:space="preserve">
    <value>Analysis</value>
    <comment>The directory which will contain the different extracted measurements/statistics.</comment>
  </data>
  <data name="D_MeasureFile" xml:space="preserve">
    <value>measures.csv</value>
    <comment>The file where all the statistics/measurements will be saved in.</comment>
  </data>
  <data name="D_ShapesDir" xml:space="preserve">
    <value>Shapes</value>
    <comment>The directory which will contain all the shape files.</comment>
  </data>
  <data name="D_TempDir" xml:space="preserve">
    <value>Temp</value>
    <comment>The directory which will store all the shapes during processing phase, this map is temporary.</comment>
  </data>
  <data name="EX_Directoy_NotExist" xml:space="preserve">
    <value>The provided directory does not exist '{0}'.</value>
    <comment>The exception which is given when an attempt is made to read from a directory which does not exist.</comment>
  </data>
  <data name="EX_Dubble_Snapshot" xml:space="preserve">
    <value>The current record already contains a snapshot. Please reset the RecordHolder first before taking another snapshot.</value>
    <comment>The exception which is given when there is an attempt to make another snapshot while a previous one is still stored in it.</comment>
  </data>
  <data name="EX_EndOfStream" xml:space="preserve">
    <value>Cannot read data from the end of a stream.</value>
    <comment>The exception which is given when an attempt to read from the end of a file is given.</comment>
  </data>
  <data name="EX_FileNotFound" xml:space="preserve">
    <value>Could not load file '{0}' because it does not exist.</value>
    <comment>The exception which is given when a file could not be read because it could not be found on the device.</comment>
  </data>
  <data name="EX_FileNotLoad" xml:space="preserve">
    <value>Could not load file '{0}' because of an Exception.</value>
    <comment>The exception which is given when a file could not be read because of another exception. This other exception will be shown after it and execution will continue without this part.</comment>
  </data>
  <data name="EX_G3_Writer" xml:space="preserve">
    <value>Cannot use the constructor without IOWriteResult variables.</value>
    <comment>The exception which is given when an exception in a writer happens but the cause of the fail is not provided.</comment>
  </data>
  <data name="EX_Invalid_Format" xml:space="preserve">
    <value>The current class cannot read '{0}', expected format(s) '{1}'.</value>
    <comment>The exception which is given when a format exception is called because of invalid formats.</comment>
  </data>
  <data name="EX_Invalid_Format_No_Args" xml:space="preserve">
    <value>The provided format could not be processed by this class.</value>
    <comment>The exception which is given when a format exception is called withoutt specifying any arguments for the cause.</comment>
  </data>
  <data name="EX_Invalid_Vector_Size" xml:space="preserve">
    <value>Invalid vector size, expected size {0} but got '{1}'</value>
    <comment>The exception which is given when an array could not be converted to a 3D vector because the dimensions weren't right.</comment>
  </data>
  <data name="EX_MinMax_Switch" xml:space="preserve">
    <value>The provided maximum value is below the minimum bound. The maximum value should always be larger than this minimum bound.</value>
    <comment>The exception which is given when a maximum value is provided which is less than a minimum lower bound.</comment>
  </data>
  <data name="EX_Missing_Ext" xml:space="preserve">
    <value>No extension where provided for reader '{0}'. Add your own reader to the FileManager by using the AddReader(IReader&lt;&gt;) method.</value>
    <comment>The exception which is given when an attempt to read a file is made that this application does not yet support.</comment>
  </data>
  <data name="EX_ExpPosValue" xml:space="preserve">
    <value>The provided number had a negative value while this function only excepts positive values. Given value {0}.</value>
    <comment>The exception which is given when a negative number is provided to a method which only accepts positive ones.</comment>
  </data>
  <data name="EX_UnEqual_Sizes" xml:space="preserve">
    <value>The provided arrays do not have the same size, all should be of the same length. Expected Size: {0}, Given Size {1}.</value>
    <comment>The exception which is given when 2 or more arrays are provided of different lengths when all should have the exact same element count.</comment>
  </data>
  <data name="EX_Array_Empty" xml:space="preserve">
    <value>The given array is empty, this method does not accept arrays without values.</value>
    <comment>The exception which is given when an empty array is provided while its values are important.</comment>
  </data>
  <data name="D_QueryDir" xml:space="preserve">
    <value>Query</value>
    <comment>The directory which will contain all the query shapes which needs to be compared with our stored database.</comment>
  </data>
  <data name="D_QueryFile" xml:space="preserve">
    <value>queryresults.csv</value>
    <comment>The file where all the similar files with their scores will be saved in.</comment>
  </data>
  <data name="EX_Not_Supported" xml:space="preserve">
    <value>Operations for the given data is currently not supported: {0}</value>
    <comment>The exception which is given when a method has not implementated a reaction for a specific type or argument input. Developers should write extensions for it.</comment>
  </data>
  <data name="F_MeshName" xml:space="preserve">
    <value>MeshName</value>
    <comment>The format to use in files to describe the name of a mesh.</comment>
  </data>
  <data name="EX_Cast" xml:space="preserve">
    <value>Could not cast an object of type {0} to type {1}.</value>
    <comment>The exception which is given when an attempt to cast an object from type A to type B is being performed and failed.</comment>
  </data>
  <data name="D_EvaluationFile" xml:space="preserve">
    <value>evaluations.csv</value>
    <comment>The file where the analysis/evaluation of the query results will be saved to.</comment>
  </data>
  <data name="D_SettingsFile" xml:space="preserve">
    <value>settings.ini</value>
    <comment>The file where all the application settings will be stored in.</comment>
  </data>
  <data name="EX_Array_Size" xml:space="preserve">
    <value>Invalid array size, expected length '{0}' but got one of length '{1}'.</value>
    <comment>The exception which is given when an array is provided of an invalid length.</comment>
  </data>
  <data name="EX_Merge_State" xml:space="preserve">
    <value>Cannot perform this operation in a MergeRecord before the record is merged. Try calling record.Merge() before accessing variables.</value>
    <comment>The exception which is given when in a MergeRecord a retrieve operation is performed while the individual records are not merged yet.</comment>
  </data>
  <data name="EX_Merge_MissingFunc" xml:space="preserve">
    <value>Cannot merge the values for property {0} because no function is provided to combine all the objects for this type.</value>
    <comment>The exception which is given when a MergeRecord cannot merge 2 properties because there is no function to combine the 2.</comment>
  </data>
</root>